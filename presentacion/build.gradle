plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.androidbase"
        minSdk 26
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Dependencias de modulos
    implementation project(path: ':dominio')
}

// tarea para los reportes de analisis de codigo
task jacocoTestReport(type: JacocoReport, dependsOn: [':dominio:testDebugUnitTest']) {

    def moduleDominio = project(':dominio')

    def directoriesToCoverage = layout.files(
            "$moduleDominio.buildDir/tmp/kotlin-classes/debug/com/dominio",
            "$buildDir/tmp/kotlin-classes/debug/com/androidbase",
    )

    def mainSources = layout.files(
            "$moduleDominio.projectDir/src/main/java/com/dominio",
            "$projectDir/src/main/java/com/presentacion",
    )

    def executionFilesFromConnectedAndroidTest = fileTree(
            dir: "$buildDir", includes:
            ["outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec"],
    )

    def executionFileForUnitTestInModule =
            "$moduleDominio.buildDir/outputs/Unit_Test_code_coverage/debugUnitTest/testDebugUnitTest.exec"

    def executionFiles = layout.files(
            executionFilesFromConnectedAndroidTest,
            executionFileForUnitTestInModule,
    )

    sourceDirectories.setFrom(files([mainSources]))
    classDirectories.setFrom(files([directoriesToCoverage.asFileTree]))
    executionData.setFrom(executionFiles.asFileTree)

    reports {
        xml.enabled true
        html.enabled true
    }

}